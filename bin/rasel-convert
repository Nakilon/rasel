#!/usr/bin/env ruby

abort_usage = lambda do
  abort <<~HEREDOC
    usage:
    \t$ #{__FILE__} <file.rasel> <file.rasela>
    \t$ #{__FILE__} <file.rasela> <file.rasel>
  HEREDOC
end
abort_usage.call unless ARGV[0] and File.file? ARGV[0]
abort_usage.call unless ARGV[0] and ARGV[1] and (!File.exist?(ARGV[1]) || puts("overwriting")) || File.file?(ARGV[1])

require "json"
case ARGV.map &File.method(:extname)
when %w{ .rasel .rasela }
  File.write ARGV[1], JSON.pretty_generate(
    File.read(ARGV[0]).
      tap{ |_| abort "empty source" if _.empty? }.
      gsub(/ +$/,"").split(?\n).
      flat_map.with_index{ |row, i| row.chars.map.with_index{ |c, j| [i, j, c] } }
  )
when %w{ .rasela .rasel }
  File.open ARGV[1], "w" do |file|
    file.puts( JSON.load(File.read ARGV[0]).each_with_object([]) do |(y, x, c, a), code|
      code[y] ||= ""
      code[y][x] = c
    end )
  end
else
  abort_usage.call
end

puts :OK
