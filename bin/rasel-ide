#!/usr/bin/env ruby

abort "usage:\trasel-ide <file.rasela>" unless 1 == ARGV.size
abort "invalid directory" unless File.directory? File.dirname File.expand_path ARGV.first
require "json/pure"
require_relative "../lib/rasel"
RASEL.write_pretty_json ARGV.first, [[0,0,"@"]] unless File.exist? ARGV.first
abort "the argument should be a file" unless File.file? ARGV.first if File.exist? ARGV.first

require "sinatra"
enable :run
require "sinatra/reloader"  # uncomment only during the development
get "/jquery.js" do
  send_file "#{__dir__}/jquery-3.6.0.min.js"
end

get "/" do
  <<~HEREDOC
  <!DOCTYPE html>
  <html>
    <head>
      <meta charset="utf-8">
      <title>RASEL IDE</title>
      <script src="jquery.js" type="text/javascript"></script>
      <script type="text/javascript">
        window.onload = function() {
          window.jsend = function(mtd, path, options, callback) {
            $("#preloader").show();
            $[mtd](path, options).fail( function(xhr) {
              alert(xhr.responseText || "something went wrong");
            } ).done( function(text) {
              const json = JSON.parse(text);
              if (json.status == "error")
                alert("SERVER ERROR: " + json.message);
              else if (json.status == "success") {
                callback(json.data);
              } else alert("server response is weird");
            } ).always( function() {
              $("#preloader").hide();
            } );
          };

          $("textarea").keyup( function(event) {
            event.stopPropagation();
          } );

          $("button").click( function() {
            jsend("post", "run", {stdin: JSON.stringify($("textarea").val())}, function(data) {
              console.log(data);
              const [stdout, exitstatus] = data;
              $("#result").empty().
                append(`<div><b>EXIT CODE:</b> ${exitstatus}</div>`).
                append("<div><b>LOG:</b></div>");//.append(stdout)//.
                //append("<div><b>STDOUT:</b></div>").append(stdout)//.
                //append("<div><b>STDERR:</b></div>").append(stderr)
              stdout.forEach( function(msg) {
                const [reason, str] = JSON.parse(msg);
                const div = $("<div style='display: flex; gap: 0.3rem; align-items: baseline'></div>");
                switch (reason) {
                  case "print":
                    div.text("print:").append(`<span>${str}</span>`);
                    break;
                  case "abort":
                    div.text("aborted:").append(`<span>${str}</span>`);
                    break;
                  case "loop":
                    div.text("stack:");
                    str.forEach( function(item) {
                      const div_item = $("<div class='stackitem'></div>").appendTo(div);
                      if (item instanceof Array) {
                        const [value, annotation] = item;
                        div_item.append(value);
                        $("<div style='font-size: xx-small'></div>").text(annotation).appendTo(div_item);
                      } else {
                        div_item.append(item);
                      };
                    } );
                    break;
                  default:
                    div.text("unknown msg type:").append(`<span>${reason}</span>`);
                };
                div.appendTo($("#result"));
              } );
            } );
          } );
          window.post_code = function() {
            let dump = [];
            $("#grid").children().each( function(i, row) {
              $(row).children().each( function(j, cell) {
                if (cell.innerText.length || cell.dataset.a) dump.push([i, j, cell.innerText, cell.dataset.a]);
              } );
            } );
            jsend("post", "write", {dump: JSON.stringify(dump)}, ()=>{});
          };

          window.annotate = function() {
              window.selected_cell.css("background-color", "#eee")[0].dataset.a = $("input").val();
          };
          $("input").keyup( function(event) {
            event.stopPropagation();
            if (event.keyCode != 13) return;
            if ($("input").val().length)
              annotate();
            else {
              window.selected_cell.css("background-color", "")[0];
              delete window.selected_cell[0].dataset.a;
            };
            post_code();
          } );
          $("body").keyup( function(event) {
            if (!event.key) return;
            const char = (event.key == "Delete" || event.key == "Backspace") ? "" :
                          event.key.length == 1 ? event.key : null;
            if (!char) return;
            window.selected_cell[0].innerText = char;
            post_code();
          } );

          window.create_span = function() {
            return $("<span></span>").click( function() {
              if (window.selected_cell) window.selected_cell.css("border-color", "white");
              window.selected_cell = $(this);
              window.selected_cell.css("border-color", "black");
              $("input").val(this.dataset.a);
            } );
          };
          window.add_row = function(i = 0) {
              add_row_adder();
              add_row_remover();
              const row = $("<span style='display: flex'></span>");
              let w = $("#column_removers").children().length;
              if (i && w)
                row.insertAfter($(`#grid>*:eq(${i-1})`));
              else
                row.prependTo($("#grid"));
              while (w--) create_span().appendTo(row);
          };
          window.add_row_adder = function() {
            const i = $("#row_adders").children().length;
            $("<span>+</span>").click( function() {
              add_row(i);
              post_code();
            } ).appendTo($("#row_adders"));
          };
          window.add_row_remover = function() {
            const i = $("#row_removers").children().length;
            $("<span>✕</span>").click( function() {
              $("#row_adders>*").last().remove();
              $("#row_removers>*").last().remove();
              let removed = false;
              $($("#grid").children()[i]).children().each( function() {
                if (selected_cell[0] == this) removed = true;
              } );
              $("#grid").children()[i].remove();
              if (removed) $("#grid>*:eq(0)>*:eq(0)").click();
              post_code();
            } ).appendTo($("#row_removers"));
          };
          window.add_column = function(i = 0) {
              add_column_adder();
              add_column_remover();
              $("#grid").children().each( function() {
                if (i && $(this).children().length)
                  create_span().insertAfter($(this).children()[i-1]);
                else
                  create_span().prependTo($(this));
              } );
          };
          window.add_column_adder = function() {
            const i = $("#column_adders").children().length;
            $("<span>+</span>").click( function() {
              add_column(i);
              post_code();
            } ).appendTo($("#column_adders"));
          };
          window.add_column_remover = function() {
            const i = $("#column_removers").children().length;
            $("<span>✕</span>").click( function() {
              $("#column_adders>*").last().remove();
              $("#column_removers>*").last().remove();
              let removed = false;
              $("#grid").children().each( function() {
                if (selected_cell[0] == $(this).children()[i]) removed = true;
                $($(this).children()[i]).remove();
              } );
              if (removed) $("#grid>*:eq(0)>*:eq(0)").click();
              post_code();
            } ).appendTo($("#column_removers"));
          };
          add_row_adder();
          add_column_adder();

          jsend("get", "read", null, function(data) {
            const code = JSON.parse(data);
            code.forEach( function([y, x, c, a]) {
              while(y >= $("#row_removers").children().length) add_row();
              while(x >= $("#column_removers").children().length) add_column();
            } );
            code.forEach( function([y, x, c, a]) {
              $(`#grid>*:eq(${y})>*:eq(${x})`).text(c).click();
              if (a) {
                $("input").val(a);
                annotate();
              };
            } );
            $("#grid>*:eq(0)>*:eq(0)").click();
          } );
        };
      </script>
    <body style="margin: 0; padding-left: 1rem; padding-right: 1rem; padding-bottom: 0.5rem; font-family: monospace; font-size: xx-large">
      <style>
        span{
          display: inline-block; line-height: 1.2rem; min-width: 1.2rem; max-height: 1.2rem; min-height: 1.2rem; text-align: center;
          border: 1px; border-style: solid; border-color: white;
        }
        label{ font-size: initial }
        .stackitem{
          flex-direction: column; display: flex; align-items: center;
          background: #eee; padding-left: 0.2rem; padding-right: 0.2rem; margin-top: 0.2rem;
        }
      </style>
      <div id="preloader" style="
        position: fixed;
        width: 100%; height: 100%;
        left: 0; top: 0;
        overflow: visible; z-index: 999;
        background: hsla(0,0%,95%,0.8)
                    url(&quot;data:image/svg+xml,%3Csvg fill='%23000000' height='24' viewBox='0 0 24 24' width='24' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M0 0h24v24H0z' fill='none'/%3E%3Cpath d='M15 1H9v2h6V1zm-4 13h2V8h-2v6zm8.03-6.61l1.42-1.42c-.43-.51-.9-.99-1.41-1.41l-1.42 1.42C16.07 4.74 14.12 4 12 4c-4.97 0-9 4.03-9 9s4.02 9 9 9 9-4.03 9-9c0-2.12-.74-4.07-1.97-5.61zM12 20c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7z'/%3E%3C/svg%3E&quot;)
                    no-repeat center center;
        background-size: 10%;
      "></div>
      <label>STDIN:</label>
      <textarea style="flex: auto; margin: 1rem; height: 2rem; vertical-align: middle"></textarea>
      <button>RUN</button>
      <div style="display: flex; align-items: baseline">
        <label>Selected cell annotation:</label>
        <input type="text" style="flex: auto; margin: 1rem">
      </div>
      <hr>
      <div style="
        display: grid;
        grid-template-rows: repeat(2, max-content max-content auto);
        grid-template-columns: repeat(2, max-content max-content auto);
      ">
        <div id="column_adders" style="grid-column: 3; display: flex"></div>
        <div id="column_removers" style="grid-column: 3; display: flex; padding-left: 0.5rem"></div>
        <div id="row_adders" style="grid-row: 3; display: flex; flex-direction: column"></div>
        <div id="row_removers" style="grid-row: 3; display: flex; flex-direction: column; padding-top: 0.5rem"></div>
        <div id="grid" style="grid-row: 3; padding-top: 0.4rem; padding-left: 0.5rem"></div>
      </div>
      <hr>
      <div id="result" style="font-size: initial"></div>
    </body>
  </html>
  HEREDOC
end

get "/read" do
  JSON.dump({status: :success, data: File.read(ARGV.first)})
end
post "/write" do
  RASEL.write_pretty_json ARGV.first, JSON.load(params["dump"])
  JSON.dump({status: :success})
end

require "open3"
post "/run" do
  begin
    require "timeout"
    result = Timeout.timeout(2) do
      RASEL::run_annotated \
        JSON.load(File.read ARGV.first),
        StringIO.new,
        StringIO.new.tap{ |_| JSON.parse(params.fetch("stdin"), quirks_mode: true).bytes.reverse_each &_.method(:ungetbyte) }
    end
    JSON.dump({status: :success, data: [result.stdout.string.split("\n"), result.exitcode]})
  rescue Timeout::Error
    # TODO: test this branch
    JSON.dump({status: :error, message: :timeout, data: ["", 0]})
  end
end

__END__

require "open3"
post "/run" do
  # JSON.dump RASEL(JSON.load(File.read(ARGV.first)), StringIO.new)
  stdin = Tempfile.new %w{ rasel-ide .rasela }
  stdin.write JSON.load params.fetch "stdin"
  stdin.flush
  begin
    Open3.popen3 "cat #{p stdin.path} | #{__dir__}/rasel-annotated #{ARGV.first}" do |_, stdout, stderr, wait_thr|
      begin
        process_status = Timeout.timeout(2){ wait_thr.value }
        JSON.dump({status: :success, data: [stdout.read, stderr.read, process_status.exitstatus]})
      rescue Timeout::Error
        # TODO: test this branch
        Process.kill "KILL", wait_thr.pid
        JSON.dump({status: :error, message: :timeout, data: [stdout, stderr]})
      end
    end
  ensure
    stdin.close
    stdin.unlink
  end
end
